开篇
并发编程三个核心问题：分工，同步，互斥
分工：高效拆解任务，分配给线程（如Fork/Join框架就是分工模式）
同步：线程之间如何协作（CountDownLatch就是同步方式）
互斥：保证同一时刻只允许一个线程访问共享资源（可重入锁就是一种互斥手段）

One.可见性，原子性和有序性（对应程序包One）
https://time.geekbang.org/column/article/83682#previewimg
核心矛盾：CPU,内存，I/O设备这三者的速度差异（由快到慢：CPU，内存，I/O，程序整体的性能取决于最慢的操作——读写 I/O 设备，也就是说单方面提高CPU性能是无效的）
合理利用CPU性能，平衡三者速度差异，一些方式：
（1）CPU 增加了缓存，以均衡与内存的速度差异； （可见性问题）
（2）操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU与I/O设备的速度差异 （线程切换带来原子性问题，我们把一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性，
CPU 能保证的原子操作是 CPU 指令级别的，而不是高级语言的操作符）
（3）编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。（有序性问题）

